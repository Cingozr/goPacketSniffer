//    Copyright (C) 2020  Vittus Peter Ove Maqe Mikiassen
//
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.

// Do keep in mind WPA2-AES is patented, and this code as licensed as other resembling code.
// CPU's and WiFi routers use WPA2-AES, so unless you read the code to understand how this standardized method is performed
// and perhaps inspire from this, I do not imply legal authority to use the code.

// This is for educational purposes, the AP SSID, AP and client MAC's, and Anonce and Snonce are fixed strings.
// For actual use these should be modified to contain other values, strings.

// It should return the same PTK as in http://stackoverflow.com/questions/12018920/wpa-handshake-with-python-hashing-difficulties
// but I guess something is wrong;
// I abandon this project from now on, everything else is ready, the PTK just needs to be made (you can use another software to make this)
// maybe the null byte for the passwordstr is not made right
// maybe the keylen for HashPassword is right (128 bit TKIP and 4 iterations, 256 bit for CCMP and 3 iterations)
// maybe my min() and max() does not return the same as Python's
// 
// desired ptk[0:16]:
// bf49 a95f 0494 f444 2716 2f38 696e f8b6

package main
import (
	"fmt"
	// "golang.org/x/crypto/sha1"
	// "github.com/golang/crypto/pbkdf2"
	"encoding/hex"
	"encoding/base64"
	"crypto/cipher"
	"crypto/sha1"
	"crypto/aes"
	"golang.org/x/crypto/pbkdf2"
	"bytes"
	"flag"
	"io/ioutil"
	"os"
	"io"
	"crypto/rand"
	"errors"
)
func main() {
	passphrase  := "10zZz10ZZzZ"
	ssid        := "Netgear 2/158" 
	a           := "Pairwise key expansion" // per definition generated by a PRF - custom or standardized, e.g HMAC or MD5
	apmac       := "001e2ae0bdd0"
	clientmac   := "cc08e0620bc8"
	anonce      := "61c9a3f5cdcdf5fae5fd760836b8008c863aa2317022c7a202434554fb38452b" // Number used omce - like from an array where a value is picked - like NemID - Nonces are reused, a hacker can force a reset of them by retransmitting message 3 from the e4-way handshake - source: https://www.krackattacks.com/
	snonce      := "60eff10088077f8b03a0e2fc2fc37e1fe1f30f9f7cfbcfb2826f26f3379c4318"

	onemac := min(apmac, clientmac)
	twomac := max(apmac, clientmac)
	onenonce := min(anonce, snonce)
	twononce := max(anonce, snonce)
	b := onemac + twomac + onenonce + twononce

	pmk := pbkdf2.Key([]byte(passphrase), []byte(ssid), 4096, 32, sha1.New)
	ptk := CustomPRF512(string(pmk), a, b, ssid)
	fmt.Println("Pairwise Transient Key:")
	fmt.Println("* Hex:")
	for x := 0; x < len(ptk); x++ {
		if x % 16 == 0 {
			if x > 0 { fmt.Println() }
			fmt.Print("  ")
		}
		if x % 2 == 0 {
			fmt.Printf("%x ", ptk[x:x + 2])
		}
	}
	fmt.Println()
	fmt.Println("* Bytes:")
	fmt.Println(" ", ptk)
	fmt.Println("* String:")
	fmt.Println(" ", string(ptk))
	fmt.Println()
	fmt.Println(len(ptk), len(ptk) / 4, len(ptk) * 8)
	// fmt.Printf("%08b\n", ptk)
	fmt.Printf("KCK - Key Confirmation Key: %08b\n", ptk[0:16])
	fmt.Printf("KEK - Key Encryption Key: %08b\n", ptk[16:32])
	fmt.Printf("TEK - Temporal Encryption Key: %08b\n", ptk[32:48])
	fmt.Printf("TMK - Temporal MIC Keys: %08b\n", ptk[48:64])
	//  fmt.Println("KCK - Key Confirmation Key:", string(ptk[]))
	//  fmt.Println("KEK - Key Encryption Key:", )
	//  fmt.Println("TEK - Temporal Encryption Key:", )
	//  fmt.Println("TMK - Temporal MIC Keys:", )
	//  fmt.Println("Pairwise Master key:")
	fmt.Println("* Hex:")
	for x := 0; x < len(pmk); x++ {
		if x % 16 == 0 {
			if x > 0 { fmt.Println() }
			fmt.Print("  ")
		}
		if x % 2 == 0 {
			fmt.Printf("%x ", pmk[x:x + 2])
		}
	}
	fmt.Println()
	fmt.Println("* Bytes:")
	fmt.Println(" ", pmk)
	fmt.Println("* String:")
	fmt.Println(" ", string(pmk))
	file := flag.String("file", "", "the file to read data from to encrypt with a simulation of assymmetric keys like in WPA - using AES, SHA1, and MD5 - the method used ix 16 byte PMK xor")
	flag.Parse()
	osFile, err := os.Open(*file)
	if err != nil { panic(err) }
	data, err := ioutil.ReadFile(osFile.Name())
	if err = osFile.Close(); err != nil { panic(err) }
	// encrypted, err := encrypt(pmk, string(data))
	encrypted, err := encrypt(ptk[32:48], string(data))
	if err != nil { panic(err) }
	fmt.Println("Encrypted data:")
	fmt.Println("* String:")
	fmt.Println(" ", encrypted)
	// fmt.Println("* Hex:")
	// fmt.Println(hex.Dump(encrypted)
	// fmt.Println("* Bytes:")
	// fmt.Println([]byte(encrypted))
	decrypted, err := decrypt(ptk[32:48], string(encrypted))
	fmt.Println("Decrypted data:")
	fmt.Println("* String:")
	fmt.Println(" ", decrypted)
	// fmt.Println("* Hex:")
	// fmt.Println(hex.Dump(decrypted)
	// fmt.Println("* Bytes:")
	// fmt.Println([]byte(decrypted))
}
func CustomPRF512(key, a, b, ssid string) []byte {
	var ptk []byte
	var buff bytes.Buffer
	nullbyte := []byte{0}
	for i := 0; i < 5; i++ {
		passwordstr := "Pairwise key expansion" + string(nullbyte) + b + string(i)
		password := []byte(passwordstr)

		mysha1 := sha1.New()
		mysha1.Write([]byte(key))
		ptk1 := HashPassword(password, []byte(ssid))
		
		buff.Write(ptk1)
	}
	ptk = buff.Bytes()
	return ptk
}
func HashPassword(password, salt []byte) []byte {
  defer clear(password)
  return pbkdf2.Key(password, salt, 4096, 16, sha1.New)
}
func checkerr(err error) {
	if err != nil {
		panic(err)
	}
}
func min(one, two string) string {
	src0 := []byte(one)
	dst0 := make([]byte, hex.DecodedLen(len(src0)))
	oneLen, err0 := hex.Decode(dst0, src0)
	checkerr(err0)

	src1 := []byte(two)
	dst1 := make([]byte, hex.DecodedLen(len(src1)))
	twoLen, err1 := hex.Decode(dst1, src1)
	checkerr(err1)

	if oneLen < twoLen { return one }
	return two
}
func max(one, two string) string {
	src0 := []byte(one)
	dst0 := make([]byte, hex.DecodedLen(len(src0)))
	oneLen, err0 := hex.Decode(dst0, src0)
	checkerr(err0)

	src1 := []byte(two)
	dst1 := make([]byte, hex.DecodedLen(len(src1)))
	twoLen, err1 := hex.Decode(dst1, src1)
	checkerr(err1)

	// if oneLen < twoLen { return one }
	if oneLen > twoLen { return one }
	return two
}
func clear(b []byte) {
	for i := 0; i < len(b); i++ { b[i] = 0; }
}

// From https://gist.github.com/mickelsonm/e1bf365a149f3fe59119
func encrypt(key []byte, message string) (encmess string, err error) {
	plainText := []byte(message)

	block, err := aes.NewCipher(key)
	if err != nil { return }

	//IV needs to be unique, but doesn't have to be secure.
	//It's common to put it at the beginning of the ciphertext.
	cipherText := make([]byte, aes.BlockSize+len(plainText))
	iv := cipherText[:aes.BlockSize]
	if _, err = io.ReadFull(rand.Reader, iv); err != nil { return }

	stream := cipher.NewCFBEncrypter(block, iv)
	stream.XORKeyStream(cipherText[aes.BlockSize:], plainText)

	//returns to base64 encoded string
	encmess = base64.URLEncoding.EncodeToString(cipherText)
	return
}
func decrypt(key []byte, securemess string) (decodedmess string, err error) {
	cipherText, err := base64.URLEncoding.DecodeString(securemess)
	if err != nil { return }

	block, err := aes.NewCipher(key)
	if err != nil { return }

	if len(cipherText) < aes.BlockSize {
		err = errors.New("Ciphertext block size is too short")
		return
	}

	//IV needs to be unique, but doesn't have to be secure.
	//It's common to put it at the beginning of the ciphertext.
	iv := cipherText[:aes.BlockSize]
	cipherText = cipherText[aes.BlockSize:]

	stream := cipher.NewCFBDecrypter(block, iv)
	// XORKeyStream can work in-place if the two arguments are the same.
	stream.XORKeyStream(cipherText, cipherText)

	decodedmess = string(cipherText)
	return
}
